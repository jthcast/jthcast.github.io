{"version":3,"sources":["components/atoms/PrismCode/index.tsx","data/CodesData/5.tsx"],"names":["PrismCode","code","language","plugins","ref","useRef","useEffect","current","Prism","highlightElement","className","join","trim","Item"],"mappings":"+LA6CeA,IA1BG,SAAC,GAIa,IAH9BC,EAG6B,EAH7BA,KAG6B,IAF7BC,gBAE6B,MAFlB,aAEkB,EAD7BC,EAC6B,EAD7BA,QAEMC,EAAMC,iBAAoB,MAOhC,OALAC,qBAAU,WACJF,EAAIG,SACNC,IAAMC,iBAAiBL,EAAIG,WAE5B,IAED,qBAAKG,UAAWP,GAAWA,EAAQQ,KAAK,KAAxC,SACE,sBACEP,IAAKA,EACLM,UAAS,mBAAcR,GAAd,OACPC,EAAO,WAAOA,EAAQQ,KAAK,MAAS,IAHxC,SAMGV,GAAQA,EAAKW,a,wFCPPC,UA7BF,WAeX,OACE,qCACE,cAAC,IAAD,CAAWZ,KAhBL,gWAgBiBC,SAAS,eAChC,8CACA,+CACA,8CACA","file":"static/js/5.b28d18cb.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-css-extras';\nimport 'prismjs/components/prism-scss';\nimport 'prismjs/components/prism-typescript';\n// import 'prismjs/components/prism-jsx';\n// import 'prismjs/components/prism-tsx';\n// import 'prismjs/plugins/line-numbers/prism-line-numbers';\n// import 'prismjs/plugins/line-numbers/prism-line-numbers.css';\nimport 'prismjs/themes/prism-tomorrow.css';\n// import './prism-vsc-dark-plus.scss';\nimport './PrismCode.scss';\n\ninterface IPrismCode {\n  code?: string;\n  language?: string;\n  plugins?: Array<string>;\n}\n\nconst PrismCode = ({\n  code,\n  language = 'typescript',\n  plugins,\n}: IPrismCode): JSX.Element => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      Prism.highlightElement(ref.current);\n    }\n  }, []);\n  return (\n    <pre className={plugins && plugins.join(' ')}>\n      <code\n        ref={ref}\n        className={`language-${language}${\n          plugins ? ` ${plugins.join(' ')}` : ''\n        }`}\n      >\n        {code && code.trim()}\n      </code>\n    </pre>\n  );\n};\n\nexport default PrismCode;\n","import React from 'react';\nimport PrismCode from '../../components/atoms/PrismCode';\n\nconst Item = (): JSX.Element => {\n  const code = `\nfunction sieveOfEratosthenes(n) {\n  const answer = [...Array(n+1).keys()];\n  for(let i=2; i<answer.length; i++){\n      if(answer[i] !== -1){\n          for(let index=i*i; index<=n; index+=i){\n              answer[index] = -1;\n          }\n      }\n  }\n  \n  return answer.filter(number => number !== -1 && number !== 0 && number !== 1);\n}\n`;\n  return (\n    <>\n      <PrismCode code={code} language=\"javascript\" />\n      <h2>입력</h2>\n      <p>const n = 100;</p>\n      <h2>출력</h2>\n      <p>\n        [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n        71, 73, 79, 83, 89, 97]\n      </p>\n    </>\n  );\n};\n\nexport default Item;\n"],"sourceRoot":""}