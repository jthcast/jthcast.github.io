{"version":3,"sources":["components/atoms/PrismCode/index.tsx","data/PostsData/3.tsx"],"names":["PrismCode","code","language","plugins","ref","useRef","useEffect","current","Prism","highlightElement","className","join","trim","Item","target","rel","href","src","aria-label","alt","role"],"mappings":"+LA6CeA,IA1BG,SAAC,GAIa,IAH9BC,EAG6B,EAH7BA,KAG6B,IAF7BC,gBAE6B,MAFlB,aAEkB,EAD7BC,EAC6B,EAD7BA,QAEMC,EAAMC,iBAAoB,MAOhC,OALAC,qBAAU,WACJF,EAAIG,SACNC,IAAMC,iBAAiBL,EAAIG,WAE5B,IAED,qBAAKG,UAAWP,GAAWA,EAAQQ,KAAK,KAAxC,SACE,sBACEP,IAAKA,EACLM,UAAS,mBAAcR,GAAd,OACPC,EAAO,WAAOA,EAAQQ,KAAK,MAAS,IAHxC,SAMGV,GAAQA,EAAKW,a,wFCiNPC,UApPF,WAiIX,OACE,qCACE,2DACA,oKACkC,IAChC,sBAAMH,UAAU,WAAhB,sJAEQ,IAJV,8XAQA,4CACA,qVAE2C,IACzC,sBAAMA,UAAU,WAAhB,4CAEQ,IALV,6EAQA,cAAC,IAAD,CAAWT,KApJgB,8HAqJ3B,wkBAMA,cAAC,IAAD,CAAWA,KAvJO,8IAwJlB,iRAIA,cAAC,IAAD,CAAWA,KArJS,wqBAsJpB,sZAIA,cAAC,IAAD,CAAWA,KA9Hc,45BA+HzB,2DACA,okBAKA,4BACE,mBACEa,OAAO,SACPC,IAAI,aACJC,KAAK,oCACLN,UAAU,oBAJZ,4JASF,2iBAKA,mCACE,qBACEO,IAAI,8HACJC,aAAW,uBACXC,IAAI,yBAEN,mUAKF,qCACA,kcAKA,cAAC,IAAD,CAAWlB,KAlIF,01CAkIiBC,SAAS,QACnC,oDACA,4mBAOA,4BACE,mBACEY,OAAO,SACPC,IAAI,aACJC,KAAK,gEACLN,UAAU,oBAJZ,qKASF,4TAIA,olCAMqC,IACnC,sBAAMU,KAAK,MAAMF,aAAW,2BAA5B,0BAPF","file":"static/js/4.5e477631.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-css-extras';\nimport 'prismjs/components/prism-scss';\nimport 'prismjs/components/prism-typescript';\n// import 'prismjs/components/prism-jsx';\n// import 'prismjs/components/prism-tsx';\n// import 'prismjs/plugins/line-numbers/prism-line-numbers';\n// import 'prismjs/plugins/line-numbers/prism-line-numbers.css';\nimport 'prismjs/themes/prism-tomorrow.css';\n// import './prism-vsc-dark-plus.scss';\nimport './PrismCode.scss';\n\ninterface IPrismCode {\n  code?: string;\n  language?: string;\n  plugins?: Array<string>;\n}\n\nconst PrismCode = ({\n  code,\n  language = 'typescript',\n  plugins,\n}: IPrismCode): JSX.Element => {\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      Prism.highlightElement(ref.current);\n    }\n  }, []);\n  return (\n    <pre className={plugins && plugins.join(' ')}>\n      <code\n        ref={ref}\n        className={`language-${language}${\n          plugins ? ` ${plugins.join(' ')}` : ''\n        }`}\n      >\n        {code && code.trim()}\n      </code>\n    </pre>\n  );\n};\n\nexport default PrismCode;\n","import React from 'react';\nimport PrismCode from '../../components/atoms/PrismCode';\n// import darkModeColorGuide from '../../resources/images/post/3/darkmode color guide.png';\n\nconst Item = (): JSX.Element => {\n  const checkSystemPreferenceCode = `\nconst systemPreference = window.matchMedia('(prefers-color-scheme: dark)');\nconst isDark = systemPreference.matches;\n`;\n  const setAttributeCode = `\nif (isDark) {\n  document.body.setAttribute('data-theme', 'dark');\n} else {\n  document.body.setAttribute('data-theme', 'light');\n}\n`;\n  const darkModeSwitchCode = `\nconst DarkModeSwitch = (): JSX.Element => {\n  const systemPreference = window.matchMedia('(prefers-color-scheme: dark)');\n  const [isDark, setDark] = useState(systemPreference.matches);\n\n  const darkModeHandling = () => {\n    setDark(!isDark);\n  };\n\n  useEffect(() => {\n    if (isDark) {\n      document.body.setAttribute('data-theme', 'dark');\n    } else {\n      document.body.setAttribute('data-theme', 'light');\n    }\n  }, [isDark]);\n\n  return (\n    <Switch\n      className=\"switch-darkMode\"\n      checked={isDark}\n      unCheckedChildren=\"🌞\"\n      checkedChildren=\"🌜\"\n      onClick={darkModeHandling}\n    />\n  );\n};\n`;\n  const darkModeSystemCheckCode = `\nconst darkModeCheck = (): null => {\n  const systemPreference = window.matchMedia('(prefers-color-scheme: dark)');\n  const [isDark, setDark] = useState(systemPreference.matches);\n\n  const checkSystemPreference = useCallback(() => {\n    if (systemPreference.matches) {\n      setDark(true);\n    } else {\n      setDark(false);\n    }\n  }, [systemPreference.matches, setDark]);\n\n  useEffect(() => {\n    if (isDark) {\n      document.body.setAttribute('data-theme', 'dark');\n    } else {\n      document.body.setAttribute('data-theme', 'light');\n    }\n  }, [isDark]);\n\n  useEffect(() => {\n    checkSystemPreference();\n    systemPreference.addEventListener('change', checkSystemPreference);\n\n    return () => {\n      systemPreference.removeEventListener('change', checkSystemPreference);\n    };\n  }, [checkSystemPreference, systemPreference]);\n\n  return null;\n};\n\nexport default darkModeCheck;\n`;\n  const cssCode = `\n:root {\n  --background-base: #FFFFFF;\n  --background-base-opacity: rgba(255, 255, 255, 0.85);\n  --background-down-opacity: rgba(255, 255, 255, 0.3);\n  --scrollbar-base-opacity: rgba(0, 0, 0, 0.5);\n  --background-code-base: #f9f2f4;\n  --color-base: #000000;\n  --color-down: #70757a;\n  --color-code-base: #9a354a;\n  --primary-brand-base: #F6A54C;\n  --secondary-brand-base: #614CF6;\n  --primary-brand-background-base: #504646;\n  --border-base: #D6D6D6;\n  --group-base: #F4F4F4;\n  --danger: #E03434;\n  --black: #000000;\n  --white: #FFFFFF;\n  \n  background-color: var(--background-base);\n  color: var(--color-base);\n\n  *{\n    &::selection{\n      background: var(--color-base);\n      color: var(--background-base);\n    }\n  }\n}\n  \n[data-theme=\"dark\"] {\n  --background-base: #000000;\n  --background-base-opacity: rgba(0, 0, 0, 0.85);\n  --background-down-opacity: rgba(0, 0, 0, 0.3);\n  --scrollbar-base-opacity: rgba(255, 255, 255, 0.5);\n  --background-code-base: #3C3636;\n  --color-base: #FFFFFF;\n  --color-down: #ABABAB;\n  --color-code-base: #FFB3C2;\n  --secondary-brand-base: #6e59ff;\n  --border-base: #D6D6D6;\n  --group-base: #5D5D5D;\n\n  background-color: var(--background-base);\n  color: var(--color-base);\n\n  *{\n    &::selection{\n      background: var(--color-base);\n      color: var(--background-base);\n    }\n  }\n}\n`;\n  return (\n    <>\n      <h2>주의할 점</h2>\n      <p>\n        이 글은 CSS 변수를 활용하여 다크 모드를 구현하지만,{' '}\n        <span className=\"jth-text\">\n          인터넷 익스플로러는 CSS 변수 기능을 지원하지 않는다.\n        </span>{' '}\n        인터넷 익스플로러의 경우 CSS 변수 기능은 폴리필로도 구현이 불가능하고,\n        변수 비슷한 기능을 하는 라이브러리의 도움이 필요하니 주의하기 바란다.\n      </p>\n      <h2>Javascript</h2>\n      <p>\n        시스템 설정을 확인하여 디바이스의 현재 테마가 일반 테마인지 어두운\n        테마인지 구분한다. 이는 window 객체의 matchMedia 메서드에{' '}\n        <code className=\"jth-text\">\n          &apos;(prefers-color-scheme: dark)&apos;\n        </code>{' '}\n        쿼리를 넣어 확인할 수 있다.\n      </p>\n      <PrismCode code={checkSystemPreferenceCode} />\n      <p>\n        확인 후 body에 data 속성을 활용하여 data-theme 속성에 구분 가능한 값을\n        넣어 준다. 이 부분은 각자의 취향대로 진행하면 된다. 중요한 것은 body와\n        같은 상위 태그에 속성값 혹은 클래스로 현재 상태를 구분할 수 있어야\n        한다는 점이다.\n      </p>\n      <PrismCode code={setAttributeCode} />\n      <p>\n        React를 사용한 이 블로그의 다크 모드는 아래와 같은 코드를 사용해 스위치\n        형식으로 구현하였다.\n      </p>\n      <PrismCode code={darkModeSwitchCode} />\n      <p>\n        만약 스위치 형식이 아닌 디바이스의 환경으로만 제어할 경우 아래와 같이\n        이벤트를 등록해 주면 디바이스 환경이 바뀔 경우에 자동으로 변경된다.\n      </p>\n      <PrismCode code={darkModeSystemCheckCode} />\n      <h2>색상 선택</h2>\n      <p>\n        다크 모드는 기본적으로 일반 테마와 어두운 테마 두 가지 경우를 고려하여\n        색상을 따로 구성해야 한다. 따로 구성해야 하는 이유는 저시력자를 위해\n        색상 대비를 맞추어 주는 접근성에 대한 부분이 필요하기 때문이다.\n      </p>\n      <p>\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href=\"https://jthcast.github.io/posts/2\"\n          className=\"jth-external-link\"\n        >\n          웹 표준과 웹 접근성을 지키기 위한 노력이 필요한 이유\n        </a>\n      </p>\n      <p>\n        사람은 깊이감을 느낄 때 밝은 것을 가깝게 인식하고 어두운 것을 멀게\n        인식한다. 따라서 페이지에서 계층 구조를 나눌 때 사용자 경험 측면에서\n        사용자에게 가장 가까운 레이어일수록 밝게 표시하는 게 좋다.\n      </p>\n      <figure>\n        <img\n          src=\"https://cdn.jsdelivr.net/gh/jthcast/jthcast-client@master/src/resources/images/post/3/darkmode%20color%20guide.png?raw=true\"\n          aria-label=\"Darkmode color guide\"\n          alt=\"Darkmode color guide\"\n        />\n        <figcaption>\n          일반적으로 일반 테마의 색상을 반전시키면 다크 모드가 되는 것이라고\n          생각하는 경우가 많지만 그렇지 않다.\n        </figcaption>\n      </figure>\n      <h2>CSS</h2>\n      <p>\n        일반 테마인 경우의 CSS 변수에 색상 값을 넣어주고, 어두운 테마인 경우\n        body에 data-theme=&quot;dark&quot; 속성이 추가되므로 이를 속성 선택자로\n        찾아 CSS 변수를 Overriding 해주는 형태로 구현한다.\n      </p>\n      <PrismCode code={cssCode} language=\"css\" />\n      <h2>마치며</h2>\n      <p>\n        다크 모드는 사용자 경험을 위해 선택해야 할 것이 많다. 특히 색상 선택의\n        경우 선택할 사항이 더 많은데, 대표적인 가이드로 &apos;Material Design\n        Dark theme&apos;, &apos;Human Interface Guideline Dark mode&apos;가\n        있다. 이를 비교하고 디자인을 선택하는 부분은 좋은 글이 있어 링크로\n        남긴다.\n      </p>\n      <p>\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href=\"https://tech.socarcorp.kr/design/2020/07/10/dark-mode-01.html\"\n          className=\"jth-external-link\"\n        >\n          [SOCAR FRAME 만들기 #2] 다크 모드 받고 디자인 시스템 더블로 가! (1탄)\n        </a>\n      </p>\n      <p>\n        참고로, 이 블로그는 미니멀한 디자인이므로 확실한 색상 대비로 포인트를\n        주기 위해 Human Interface Guideline Dark mode를 선택했다.\n      </p>\n      <p>\n        각 사이트의 디자인 부분을 생각하면 모든 사이트의 다크 모드 도입이 어려운\n        것도 사실이다. 브랜드마다 고유한 이미지를 구축하기 때문에 다크 모드로\n        얻는 사용자 경험 보다 일관된 색상 디자인으로 얻는 브랜드 경험이 더\n        중요한 사이트도 있을 것이다. 이러한 부분을 잘 파악하여 선택하는 것도\n        중요할 것이다. 다크 모드는 정말 선택의 연속인 것 같다.(그래도 다크\n        모드를 지원하는 곳이 많았으면 좋겠다.. 더 이상의 눈뽕은..{' '}\n        <span role=\"img\" aria-label=\"Loudly Crying Face Emoji\">\n          😭\n        </span>\n        )\n      </p>\n    </>\n  );\n};\n\nexport default Item;\n"],"sourceRoot":""}